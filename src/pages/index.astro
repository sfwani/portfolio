---
import BaseLayout from '../layouts/BaseLayout.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

const writeups = await getCollection('writeups');
const sortedWriteups = writeups
  .filter(w => !w.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Get featured or most recent writeups (max 1 for now)
const featuredWriteups = sortedWriteups.slice(0, 1);
---

<BaseLayout title="$sanaan | Cybersecurity Portfolio">
  <div class="noise-overlay"></div>
  <div class="container">
    <section class="hero">
      <h1 class="name">$sanaan<span class="cursor"></span></h1>
      <p class="title">Offensive Security Researcher</p>
      <div class="typewriter-container">
        <span id="typewriter" class="typewriter"></span>
      </div>
    </section>
    
    <section class="about">
      <p>
        Security researcher specializing in vulnerability discovery, 
        penetration testing, and CTF competitions.
      </p>
    </section>
    
    <section class="tags-section">
      <div class="tags">
        <span class="tag">Web Exploitation</span>
        <span class="tag">Binary Analysis</span>
        <span class="tag">Reverse Engineering</span>
        <span class="tag">Fuzzing</span>
        <span class="tag">Mobile Security</span>
        <span class="tag">CTF</span>
      </div>
    </section>
    
    <section class="navigation">
      <div class="nav-items">
        <a href="/blog" class="nav-item">
          <span class="prefix">./</span>blog
        </a>
        <a href="/projects" class="nav-item">
          <span class="prefix">./</span>projects
        </a>
        <a href="/competitions" class="nav-item">
          <span class="prefix">./</span>competitions
        </a>
        <a href="/resume" class="nav-item">
          <span class="prefix">./</span>resume.txt
        </a>
      </div>
    </section>
    
    <section class="featured">
      <h2>Latest<span class="accent">_</span></h2>
      {featuredWriteups.map((post) => {
        const date = post.data.date;
        const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        
        return (
          <div class="post">
            <div class="post-meta">
              <span class="date">{formattedDate}</span>
              <a href={`/blog/${post.slug}`} class="read-more">view <span class="arrow">â†’</span></a>
            </div>
            <h3 class="post-title">{post.data.title}</h3>
          </div>
        );
      })}
    </section>
  </div>
  
  <div id="cyber-grid" class="cyber-background"></div>
  
  <Footer slot="footer" />
</BaseLayout>

<style>
  /* Custom properties */
  :root {
    --accent-cyan: #00e6e6;
    --accent-glow: rgba(0, 230, 230, 0.15);
    --bg-gradient-dark: rgba(10, 10, 12, 0.97);
    --bg-gradient-light: rgba(20, 20, 25, 0.97);
  }
  
  /* Noise overlay */
  .noise-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    opacity: 0.035;
    z-index: -1;
    pointer-events: none;
  }
  
  /* Main container */
  .container {
    max-width: 700px;
    margin: 0 auto;
    padding: 0 1.5rem;
    position: relative;
    z-index: 1;
  }
  
  /* Scan line effect */
  @keyframes scanlines {
    0% { background-position: 0 0; }
    100% { background-position: 0 100%; }
  }
  
  body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(30, 30, 30, 0.025) 50%
    );
    background-size: 100% 4px;
    z-index: 9999;
    pointer-events: none;
    opacity: 0.3;
    animation: scanlines 8s linear infinite;
  }
  
  /* Hero Section */
  .hero {
    margin: 8rem 0 4rem;
    text-align: center;
  }
  
  .name {
    font-size: 4.2rem;
    font-weight: 500;
    letter-spacing: -2px;
    margin-bottom: 1.2rem;
    position: relative;
    display: inline-block;
    background: linear-gradient(to right, var(--text-main), var(--text-secondary) 70%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
  }
  
  .cursor {
    display: inline-block;
    width: 3px;
    height: 1em;
    background-color: var(--accent-cyan);
    animation: blink 1s step-end infinite;
    position: relative;
    top: 0.15em;
    margin-left: 0.1em;
    box-shadow: 0 0 8px var(--accent-cyan);
  }
  
  .title {
    font-size: 1.5rem;
    color: var(--text-secondary);
    margin-bottom: 1.5rem;
    font-family: var(--font-mono);
    letter-spacing: -0.5px;
    font-weight: 400;
  }
  
  .typewriter-container {
    height: 1.5rem;
    font-family: var(--font-mono);
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.6);
    font-weight: 300;
  }
  
  .typewriter {
    border-right: 2px solid transparent;
  }
  
  /* About Section */
  .about {
    text-align: center;
    max-width: 600px;
    margin: 0 auto 4rem;
    color: var(--text-secondary);
    font-size: 1.1rem;
    line-height: 1.6;
  }
  
  /* Tags Section */
  .tags-section {
    margin-bottom: 4rem;
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.8rem;
  }
  
  .tag {
    color: var(--text-secondary);
    border: 1px solid var(--border);
    padding: 0.4rem 0.8rem;
    font-size: 0.85rem;
    font-family: var(--font-mono);
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    background: rgba(30, 30, 30, 0.2);
    position: relative;
    overflow: hidden;
  }
  
  .tag:hover {
    color: var(--text-main);
    border-color: var(--accent-cyan);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 230, 230, 0.1);
  }
  
  .tag::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to right, transparent, rgba(0, 230, 230, 0.03), transparent);
    transform: translateX(-100%);
    transition: transform 0.8s ease;
  }
  
  .tag:hover::before {
    transform: translateX(100%);
  }
  
  /* Navigation */
  .navigation {
    margin-bottom: 5rem;
  }
  
  .nav-items {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 2rem;
  }
  
  .nav-item {
    color: var(--text-secondary);
    text-decoration: none;
    font-family: var(--font-mono);
    font-size: 1.1rem;
    padding: 0.5rem 1rem;
    border: 1px solid transparent;
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    position: relative;
  }
  
  .nav-item:hover {
    color: var(--text-main);
  }
  
  .nav-item::after {
    content: '';
    position: absolute;
    width: 0;
    height: 1px;
    bottom: 0;
    left: 50%;
    background-color: var(--accent-cyan);
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    box-shadow: 0 0 5px var(--accent-cyan);
    opacity: 0.7;
  }
  
  .nav-item:hover::after {
    width: 80%;
    left: 10%;
  }
  
  .prefix {
    color: var(--accent-cyan);
    margin-right: 2px;
  }
  
  /* Featured Post */
  .featured {
    margin-bottom: 4rem;
    text-align: center;
  }
  
  .featured h2 {
    font-size: 1.4rem;
    margin-bottom: 1.5rem;
    font-weight: 500;
    letter-spacing: -1px;
    position: relative;
    display: inline-block;
  }
  
  .accent {
    color: var(--accent-cyan);
    animation: blink 1s step-end infinite;
    text-shadow: 0 0 5px var(--accent-glow);
  }
  
  .post {
    border: 1px solid var(--border);
    padding: 1.2rem 1.5rem;
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    max-width: 500px;
    margin: 0 auto;
    text-align: left;
    background: rgba(20, 20, 25, 0.3);
    backdrop-filter: blur(5px);
  }
  
  .post:hover {
    border-color: var(--accent-cyan);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(0, 230, 230, 0.1);
  }
  
  .post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .date {
    color: var(--accent-cyan);
    font-family: var(--font-mono);
    font-size: 0.8rem;
    opacity: 0.9;
  }
  
  .post-title {
    font-size: 1.1rem;
    color: var(--text-main);
    font-weight: 400;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .read-more {
    color: var(--text-secondary);
    text-decoration: none;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    transition: all 0.3s ease;
    opacity: 0.8;
  }
  
  .read-more:hover {
    color: var(--accent-cyan);
    opacity: 1;
  }
  
  .arrow {
    display: inline-block;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  }
  
  .read-more:hover .arrow {
    transform: translateX(3px);
  }
  
  /* Background */
  .cyber-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    pointer-events: none;
    background: radial-gradient(circle at 50% 30%, var(--bg-gradient-light), var(--bg-gradient-dark) 80%);
    overflow: hidden;
  }
  
  /* Animations */
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .hero {
      margin: 5rem 0 3rem;
    }
    
    .name {
      font-size: 3rem;
    }
    
    .title {
      font-size: 1.2rem;
    }
    
    .nav-items {
      gap: 1rem;
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Typewriter effect
    const typewriter = document.getElementById('typewriter');
    const phrases = [
      "Discovering vulnerabilities in web applications",
      "Solving complex CTF challenges",
      "Researching security weaknesses",
      "Building secure systems",
      "Analyzing malicious code"
    ];
    
    let currentPhrase = 0;
    let currentChar = 0;
    let isDeleting = false;
    let isPaused = false;
    let typingSpeed = 70;
    
    function type() {
      const phrase = phrases[currentPhrase];
      
      if (isDeleting) {
        typewriter.textContent = phrase.substring(0, currentChar - 1);
        currentChar--;
        typingSpeed = 30;
      } else {
        typewriter.textContent = phrase.substring(0, currentChar + 1);
        currentChar++;
        typingSpeed = 70;
      }
      
      // Pause at end of phrase
      if (!isDeleting && currentChar === phrase.length) {
        isPaused = true;
        isDeleting = true;
        typingSpeed = 1000; // Pause duration
      } else if (isDeleting && currentChar === 0) {
        isDeleting = false;
        currentPhrase = (currentPhrase + 1) % phrases.length;
        typingSpeed = 500;
      }
      
      setTimeout(type, typingSpeed);
    }
    
    type();
    
    // Create a more subtle cyber background
    const cyberGrid = document.getElementById('cyber-grid');
    const canvas = document.createElement('canvas');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    cyberGrid.appendChild(canvas);

    const ctx = canvas.getContext('2d');

    // Subtle dots/grid pattern
    const dotSpacing = 30;
    const dotRadius = 0.5;
    let glowIntensity = 0;
    let glowDirection = 1;

    // Binary pattern elements
    const binaryElements = [];
    const numBinaryElements = 20;

    // Initialize binary elements
    function initBinaryElements() {
      for (let i = 0; i < numBinaryElements; i++) {
        binaryElements.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          value: Math.random() < 0.5 ? '0' : '1',
          opacity: Math.random() * 0.2 + 0.05,
          fadeSpeed: Math.random() * 0.002 + 0.001,
          size: Math.floor(Math.random() * 10) + 8
        });
      }
    }

    // Occasionally change binary values
    function updateBinaryElements() {
      for (const element of binaryElements) {
        if (Math.random() < 0.01) {
          element.value = Math.random() < 0.5 ? '0' : '1';
        }
        
        // Fade in and out
        element.opacity += element.fadeSpeed;
        if (element.opacity > 0.3 || element.opacity < 0.05) {
          element.fadeSpeed *= -1;
        }
      }
    }

    // Draw the subtle pattern
    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Update glow intensity
      glowIntensity += 0.01 * glowDirection;
      if (glowIntensity > 1 || glowIntensity < 0) {
        glowDirection *= -1;
      }
      
      // Draw subtle dot grid
      for (let x = 0; x < canvas.width; x += dotSpacing) {
        for (let y = 0; y < canvas.height; y += dotSpacing) {
          ctx.beginPath();
          ctx.arc(x, y, dotRadius, 0, Math.PI * 2);
          ctx.fillStyle = 'rgba(50, 50, 60, 0.15)';
          ctx.fill();
        }
      }
      
      // Draw some horizontal lines
      ctx.lineWidth = 0.5;
      for (let y = dotSpacing * 2; y < canvas.height; y += dotSpacing * 6) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.strokeStyle = 'rgba(50, 50, 60, 0.1)';
        ctx.stroke();
      }
      
      // Draw a few vertical lines
      for (let x = dotSpacing * 3; x < canvas.width; x += dotSpacing * 8) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.strokeStyle = 'rgba(50, 50, 60, 0.08)';
        ctx.stroke();
      }
      
      // Draw binary elements
      updateBinaryElements();
      ctx.font = `var(--font-mono)`;
      for (const element of binaryElements) {
        ctx.fillStyle = `rgba(0, 230, 230, ${element.opacity})`;
        ctx.font = `${element.size}px var(--font-mono)`;
        ctx.fillText(element.value, element.x, element.y);
      }
      
      // Draw a subtle glow effect at a random position that changes over time
      const centerX = canvas.width / 2 + Math.sin(Date.now() / 10000) * canvas.width / 4;
      const centerY = canvas.height / 2 + Math.cos(Date.now() / 8000) * canvas.height / 4;
      
      const gradient = ctx.createRadialGradient(
        centerX, centerY, 0,
        centerX, centerY, 300
      );
      
      const glowOpacity = 0.03 + 0.02 * Math.sin(Date.now() / 2000);
      gradient.addColorStop(0, `rgba(0, 230, 230, ${glowOpacity})`);
      gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
      
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      requestAnimationFrame(draw);
    }

    // Initialize and start animation
    initBinaryElements();
    draw();

    // Resize handler
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      
      // Reinitialize for new dimensions
      binaryElements.length = 0;
      initBinaryElements();
    });
  });
</script> 