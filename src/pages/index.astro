---
import BaseLayout from '../layouts/BaseLayout.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

const writeups = await getCollection('writeups');
const sortedWriteups = writeups
  .filter(w => !w.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Get featured or most recent writeups (max 1 for now)
const featuredWriteups = sortedWriteups.slice(0, 1);
---

<BaseLayout title="$sanaan | Cybersecurity Portfolio">
  <div class="noise-overlay"></div>
  <div class="container">
    <section class="hero">
      <h1 class="name"><span id="name-typewriter"></span><span class="cursor"></span></h1>
      <p class="title">Offensive Security Researcher</p>
    </section>
    
    <section class="about">
      <p>
        Security researcher specializing in vulnerability discovery, 
        penetration testing, and CTF competitions.
      </p>
    </section>
    
    <section class="tags-section">
      <div class="tags">
        <span class="tag">Web Exploitation</span>
        <span class="tag">Binary Analysis</span>
        <span class="tag">Reverse Engineering</span>
        <span class="tag">Fuzzing</span>
        <span class="tag">Mobile Security</span>
        <span class="tag">CTF</span>
      </div>
    </section>
    
    <section class="navigation">
      <div class="nav-items">
        <a href="/blog" class="nav-item">
          <span class="prefix">./</span>blog
        </a>
        <a href="/projects" class="nav-item">
          <span class="prefix">./</span>projects
        </a>
        <a href="/competitions" class="nav-item">
          <span class="prefix">./</span>competitions
        </a>
        <a href="/resume" class="nav-item">
          <span class="prefix">./</span>resume.txt
        </a>
      </div>
    </section>
    
    <section class="featured">
      <h2>Latest<span class="accent">_</span></h2>
      {featuredWriteups.map((post) => {
        const date = post.data.date;
        const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        
        return (
          <a href={`/blog/${post.slug}`} class="post">
            <span class="date">{formattedDate}</span>
            <span class="post-title">{post.data.title}</span>
          </a>
        );
      })}
    </section>
  </div>
  
  <div id="cyber-grid" class="cyber-background"></div>
  
  <Footer slot="footer" />
</BaseLayout>

<style>
  /* Custom properties */
  :root {
    --accent-cyan: #00e6e6;
    --accent-glow: rgba(0, 230, 230, 0.15);
    --bg-dark: #080808;
    --bg-gradient-dark: rgba(10, 10, 12, 0.97);
    --bg-gradient-light: rgba(20, 20, 25, 0.97);
  }
  
  /* Noise overlay */
  .noise-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    opacity: 0.035;
    z-index: -1;
    pointer-events: none;
  }
  
  /* Main container */
  .container {
    max-width: 700px;
    margin: 0 auto;
    padding: 0 1.5rem;
    position: relative;
    z-index: 1;
  }
  
  /* Scan line effect */
  @keyframes scanlines {
    0% { background-position: 0 0; }
    100% { background-position: 0 100%; }
  }
  
  body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(30, 30, 30, 0.025) 50%
    );
    background-size: 100% 4px;
    z-index: 9999;
    pointer-events: none;
    opacity: 0.3;
    animation: scanlines 8s linear infinite;
  }
  
  /* Hero Section */
  .hero {
    margin: 8rem 0 4rem;
    text-align: center;
  }
  
  .name {
    font-size: 4.2rem;
    font-weight: 500;
    letter-spacing: -2px;
    margin-bottom: 1.2rem;
    position: relative;
    display: inline-block;
    background: linear-gradient(to right, var(--text-main), var(--text-secondary) 70%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
  }
  
  .cursor {
    display: inline-block;
    width: 3px;
    height: 1em;
    background-color: var(--accent-cyan);
    animation: blink 1s step-end infinite;
    position: relative;
    top: 0.15em;
    margin-left: 0.1em;
    box-shadow: 0 0 8px var(--accent-cyan);
  }
  
  .title {
    font-size: 1.5rem;
    color: var(--text-secondary);
    margin-bottom: 0;
    font-family: var(--font-mono);
    letter-spacing: -0.5px;
    font-weight: 400;
  }
  
  /* About Section */
  .about {
    text-align: center;
    max-width: 600px;
    margin: 0 auto 4rem;
    color: var(--text-secondary);
    font-size: 1.1rem;
    line-height: 1.6;
  }
  
  /* Tags Section */
  .tags-section {
    margin-bottom: 4rem;
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.8rem;
  }
  
  .tag {
    color: var(--text-secondary);
    border: 1px solid var(--border);
    padding: 0.4rem 0.8rem;
    font-size: 0.85rem;
    font-family: var(--font-mono);
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    background: rgba(30, 30, 30, 0.2);
    position: relative;
    overflow: hidden;
  }
  
  .tag:hover {
    color: var(--text-main);
    border-color: var(--accent-cyan);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 230, 230, 0.1);
  }
  
  .tag::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to right, transparent, rgba(0, 230, 230, 0.03), transparent);
    transform: translateX(-100%);
    transition: transform 0.8s ease;
  }
  
  .tag:hover::before {
    transform: translateX(100%);
  }
  
  /* Navigation */
  .navigation {
    margin-bottom: 5rem;
  }
  
  .nav-items {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 2rem;
  }
  
  .nav-item {
    color: var(--text-secondary);
    text-decoration: none;
    font-family: var(--font-mono);
    font-size: 1.1rem;
    padding: 0.5rem 1rem;
    border: 1px solid transparent;
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    position: relative;
  }
  
  .nav-item:hover {
    color: var(--text-main);
  }
  
  .nav-item::after {
    content: '';
    position: absolute;
    width: 0;
    height: 1px;
    bottom: 0;
    left: 50%;
    background-color: var(--accent-cyan);
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    box-shadow: 0 0 5px var(--accent-cyan);
    opacity: 0.7;
  }
  
  .nav-item:hover::after {
    width: 80%;
    left: 10%;
  }
  
  .prefix {
    color: var(--accent-cyan);
    margin-right: 2px;
  }
  
  /* Featured Post */
  .featured {
    margin-bottom: 4rem;
    text-align: left;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .featured h2 {
    font-size: 1.2rem;
    margin-bottom: 1rem;
    font-weight: 400;
    letter-spacing: -0.5px;
    font-family: var(--font-mono);
  }
  
  .accent {
    color: var(--accent-cyan);
    animation: blink 1s step-end infinite;
  }
  
  .post {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.8rem 0;
    text-decoration: none;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    transition: all 0.2s ease;
  }
  
  .post:hover {
    background: rgba(0, 230, 230, 0.03);
  }
  
  .date {
    color: var(--accent-cyan);
    font-family: var(--font-mono);
    font-size: 0.8rem;
    opacity: 0.8;
    flex-shrink: 0;
    margin-right: 1.5rem;
  }
  
  .post-title {
    font-size: 1rem;
    color: var(--text-secondary);
    font-weight: 400;
    transition: color 0.2s ease;
  }
  
  .post:hover .post-title {
    color: var(--text-main);
  }
  
  /* Background */
  .cyber-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    pointer-events: none;
    background: var(--bg-dark);
    overflow: hidden;
  }
  
  /* Animations */
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .hero {
      margin: 5rem 0 3rem;
    }
    
    .name {
      font-size: 3rem;
    }
    
    .title {
      font-size: 1.2rem;
    }
    
    .nav-items {
      gap: 1rem;
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Name typewriter effect
    const nameTypewriter = document.getElementById('name-typewriter');
    
    // Sequence: 
    // 1. Type "$sfwani?"
    // 2. Pause
    // 3. Delete "$sfwani?"
    // 4. Type "$Sanaan Fayaz Wani"
    // 5. End
    
    const nameSequence = [
      { text: "$sfwani?", action: "type", delay: 100 },
      { text: "", action: "pause", delay: 1000 },
      { text: "$sfwani?", action: "delete", delay: 50 },
      { text: "sanaan wani", action: "type", delay: 100 }
    ];
    
    let sequenceIndex = 0;
    let charIndex = 0;
    let currentText = "";
    
    function typewriterName() {
      const currentStep = nameSequence[sequenceIndex];
      
      // Handle each action type
      if (currentStep.action === "type") {
        if (charIndex < currentStep.text.length) {
          currentText += currentStep.text.charAt(charIndex);
          nameTypewriter.textContent = currentText;
          charIndex++;
          setTimeout(typewriterName, currentStep.delay);
        } else {
          // Move to next step
          sequenceIndex++;
          charIndex = 0;
          if (sequenceIndex < nameSequence.length) {
            setTimeout(typewriterName, currentStep.delay * 3);
          }
        }
      } else if (currentStep.action === "delete") {
        if (currentText.length > 0) {
          currentText = currentText.slice(0, -1);
          nameTypewriter.textContent = currentText;
          setTimeout(typewriterName, currentStep.delay);
        } else {
          // Move to next step
          sequenceIndex++;
          charIndex = 0;
          if (sequenceIndex < nameSequence.length) {
            setTimeout(typewriterName, currentStep.delay);
          }
        }
      } else if (currentStep.action === "pause") {
        // Just wait and then move to next step
        sequenceIndex++;
        if (sequenceIndex < nameSequence.length) {
          setTimeout(typewriterName, currentStep.delay);
        }
      }
    }
    
    // Start the name typewriter animation
    typewriterName();
    
    // Create a more subtle cyber background
    const cyberGrid = document.getElementById('cyber-grid');
    const canvas = document.createElement('canvas');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    cyberGrid.appendChild(canvas);

    const ctx = canvas.getContext('2d');

    // Subtle dots/grid pattern
    const dotSpacing = 30;
    const dotRadius = 0.5;
    let glowIntensity = 0;
    let glowDirection = 1;

    // Binary pattern elements
    const binaryElements = [];
    const numBinaryElements = 80;

    // Initialize binary elements
    function initBinaryElements() {
      for (let i = 0; i < numBinaryElements; i++) {
        binaryElements.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          value: Math.random() < 0.5 ? '0' : '1',
          opacity: Math.random() * 0.15 + 0.05,
          fadeSpeed: Math.random() * 0.001 + 0.0005,
          size: Math.floor(Math.random() * 14) + 8
        });
      }
    }

    // Occasionally change binary values
    function updateBinaryElements() {
      // Add new binary elements occasionally
      if (Math.random() < 0.05 && binaryElements.length < 100) {
        binaryElements.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          value: Math.random() < 0.5 ? '0' : '1',
          opacity: Math.random() * 0.15 + 0.05,
          fadeSpeed: Math.random() * 0.001 + 0.0005,
          size: Math.floor(Math.random() * 14) + 8
        });
      }
      
      for (let i = binaryElements.length - 1; i >= 0; i--) {
        const element = binaryElements[i];
        
        // Occasionally change 0 to 1 or vice versa
        if (Math.random() < 0.01) {
          element.value = element.value === '0' ? '1' : '0';
        }
        
        // Fade in and out
        element.opacity += element.fadeSpeed;
        if (element.opacity > 0.2 || element.opacity < 0.05) {
          element.fadeSpeed *= -1;
        }
        
        // Remove elements occasionally
        if (Math.random() < 0.001) {
          binaryElements.splice(i, 1);
        }
      }
    }

    // Draw the subtle pattern
    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw binary elements (0s and 1s)
      updateBinaryElements();
      for (const element of binaryElements) {
        ctx.fillStyle = `rgba(0, 230, 230, ${element.opacity})`;
        ctx.font = `${element.size}px var(--font-mono)`;
        ctx.fillText(element.value, element.x, element.y);
      }
      
      requestAnimationFrame(draw);
    }

    // Initialize and start animation
    initBinaryElements();
    draw();

    // Resize handler
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      
      // Reinitialize for new dimensions
      binaryElements.length = 0;
      initBinaryElements();
    });
  });
</script> 