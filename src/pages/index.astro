---
import BaseLayout from '../layouts/BaseLayout.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

const writeups = await getCollection('writeups');
const sortedWriteups = writeups
  .filter(w => !w.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Get featured or most recent writeups (max 1 for now)
const featuredWriteups = sortedWriteups.slice(0, 1);
---

<BaseLayout title="$sanaan | Cybersecurity Portfolio">
  <div class="noise-overlay"></div>
  <div class="full-width-container">
    <div class="container">
      <div class="main-content">
        <section class="hero">
          <h1 class="name"><span id="name-typewriter"></span><span class="cursor"></span></h1>
          <p class="title">Security Engineer</p>
        </section>
        
        <section class="about">
          <div class="terminal-window">
            <div class="terminal-header">
              <div class="terminal-buttons">
                <span class="terminal-button close"></span>
                <span class="terminal-button minimize"></span>
                <span class="terminal-button maximize"></span>
              </div>
              <div class="terminal-title">amazon-terminal</div>
            </div>
            <div class="terminal-content">
              <div class="command-line">
                <span class="prompt">$ </span>
                <span class="command">cat work.txt</span>
              </div>
              <div class="output terminal-output-1">Red Team Security Intern @ Amazon</div>
              <div class="output details terminal-output-4"># Penetration testing & vulnerability research</div>
            </div>
          </div>
          
          <div class="terminal-window">
            <div class="terminal-header">
              <div class="terminal-buttons">
                <span class="terminal-button close"></span>
                <span class="terminal-button minimize"></span>
                <span class="terminal-button maximize"></span>
              </div>
              <div class="terminal-title">cyberherd-terminal</div>
            </div>
            <div class="terminal-content">
              <div class="command-line">
                <span class="prompt">$ </span>
                <span class="command">grep "captain" teams.log</span>
              </div>
              <div class="output terminal-output-2">Blue Team Captain @ CyberHerd</div>
              <div class="output details terminal-output-3"># Leading USF's elite collegiate cybersecurity competition team</div>
            </div>
          </div>
        </section>
      </div>
      
      <div class="footer-section">
        <section class="featured">
          <div class="latest-header">
            <span class="latest-label">latest post</span>
          </div>
          {featuredWriteups.map((post) => {
            const date = post.data.date;
            const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
            
            return (
              <a href={`/blog/${post.slug}`} class="post">
                <span class="date">{formattedDate}</span>
                <span class="post-title">{post.data.title}</span>
              </a>
            );
          })}
        </section>
        
        <Footer slot="footer" />
      </div>
    </div>
  </div>
</BaseLayout>

<style is:global>
  /* Ensure body takes full width */
  body {
    margin: 0;
    padding: 0;
    width: 100%;
    min-height: 100vh;
    background-color: var(--bg-dark);
  }
</style>

<style>
  /* Custom properties */
  :root {
    --accent-blue: #0070f3;
    --accent-hover: #3291ff;
    --accent-glow: rgba(0, 112, 243, 0.15);
    --bg-dark: #000;
    --bg-secondary: #111;
    --text-main: #fff;
    --text-secondary: #888;
    --text-accent: #999;
    --border: #333;
  }
  
  /* Noise overlay */
  .noise-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    opacity: 0.035;
    z-index: -1;
    pointer-events: none;
  }
  
  /* Full width container */
  .full-width-container {
    width: 100%;
    background-color: var(--bg-dark);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    position: relative;
    z-index: 0;
  }
  
  /* Main container */
  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
    z-index: 1;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  /* Main content */
  .main-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex: 1;
    padding-top: 1.5vh;
  }
  
  /* Footer section */
  .footer-section {
    margin-bottom: 2vh;
  }
  
  /* Scan line effect */
  @keyframes scanlines {
    0% { background-position: 0 0; }
    100% { background-position: 0 100%; }
  }
  
  body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(30, 30, 30, 0.025) 50%
    );
    background-size: 100% 4px;
    z-index: 9999;
    pointer-events: none;
    opacity: 0.3;
    animation: scanlines 8s linear infinite;
  }
  
  /* Hero Section */
  .hero {
    margin: 0 0 3.5rem;
    text-align: center;
  }
  
  .name {
    font-size: 3.2rem;
    font-weight: 500;
    letter-spacing: -2px;
    margin-bottom: 0.5rem;
    position: relative;
    display: inline-block;
    background: linear-gradient(to right, var(--text-main), var(--text-secondary) 70%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    text-shadow: 0 0 30px rgba(255, 255, 255, 0.05);
  }
  
  .cursor {
    display: inline-block;
    width: 3px;
    height: 1em;
    background-color: var(--accent-blue);
    animation: blink 1s step-end infinite;
    position: relative;
    top: 0.15em;
    margin-left: 0.1em;
    box-shadow: 0 0 8px var(--accent-blue);
  }
  
  .title {
    font-size: 1.2rem;
    color: var(--text-secondary);
    margin-bottom: 0;
    font-family: var(--font-mono);
    letter-spacing: -0.5px;
    font-weight: 400;
  }
  
  /* About Section */
  .about {
    text-align: center;
    max-width: 700px;
    margin: 0 auto 2rem;
    color: var(--text-secondary);
    font-size: 0.95rem;
    line-height: 1.5;
    padding: 0.5rem;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  /* Terminal Window */
  .terminal-window {
    background: #1a1a1a;
    border-radius: 6px;
    box-shadow: 0 3px 15px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    width: 100%;
    max-width: 650px;
    margin: 0 auto;
    font-family: var(--font-mono);
    text-align: left;
    border: 1px solid #333;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .terminal-window:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(0, 112, 243, 0.1);
    border-color: rgba(0, 112, 243, 0.2);
  }

  .terminal-header {
    background: #2d2d2d;
    padding: 8px 12px;
    display: flex;
    align-items: center;
    position: relative;
  }

  .terminal-buttons {
    display: flex;
    gap: 6px;
  }

  .terminal-button {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
  }

  .terminal-button.close {
    background: #ff5f56;
  }

  .terminal-button.minimize {
    background: #ffbd2e;
  }

  .terminal-button.maximize {
    background: #27c93f;
  }
  
  .terminal-title {
    position: absolute;
    width: 100%;
    text-align: center;
    left: 0;
    font-size: 0.8rem;
    color: #999;
  }

  .terminal-content {
    padding: 12px 15px;
    line-height: 1.5;
  }

  .command-line {
    margin-bottom: 4px;
    display: flex;
    align-items: center;
  }

  .prompt {
    color: var(--accent-blue);
    margin-right: 8px;
    display: inline-flex;
  }

  .command {
    color: #fff;
    position: relative;
    display: inline-block;
    overflow: hidden;
    white-space: nowrap;
    border-right: 2px solid transparent;
    animation: typing 2s steps(15, end) 1, blink-caret 0.75s step-end infinite;
  }
  
  .terminal-window:first-child .command {
    animation-delay: 0.5s;
  }
  
  .terminal-window:last-child .command {
    animation-delay: 2.5s;
  }
  
  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }
  
  @keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: var(--accent-blue) }
  }

  .output {
    color: #ddd;
    padding-left: 15px;
    opacity: 0;
    animation: fadeIn 0.5s ease forwards;
    text-shadow: 0 0 1px rgba(221, 221, 221, 0.3);
  }
  
  .terminal-output-1 {
    animation-delay: 2s;
  }
  
  .terminal-output-2 {
    animation-delay: 4s;
  }
  
  .terminal-output-3 {
    animation-delay: 4.5s;
  }
  
  .terminal-output-4 {
    animation-delay: 2.5s;
    font-size: 0.85rem;
    color: #999;
    margin-top: 4px;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(5px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .details {
    color: #999;
    font-size: 0.85rem;
    margin-top: 4px;
  }
  
  /* Featured Post */
  .featured {
    margin-bottom: 1.5rem;
    text-align: left;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    position: relative;
    margin-top: 0;
    opacity: 0.85;
  }
  
  .latest-header {
    margin-bottom: 0.7rem;
    border-bottom: 1px solid var(--border);
    padding-bottom: 0.3rem;
  }
  
  .latest-label {
    color: var(--accent-blue);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    letter-spacing: 0.5px;
  }
  
  .post {
    display: flex;
    align-items: baseline;
    padding: 0.3rem 0;
    text-decoration: none;
    transition: all 0.15s ease;
    gap: 1rem;
  }
  
  .post:hover {
    transform: translateX(3px);
  }
  
  .date {
    color: var(--text-accent);
    font-family: var(--font-mono);
    font-size: 0.75rem;
    opacity: 0.7;
  }
  
  .post-title {
    font-size: 0.85rem;
    color: var(--text-secondary);
    transition: color 0.2s ease;
  }
  
  .post:hover .post-title {
    color: var(--text-main);
  }
  
  /* Background */
  .cyber-background {
    display: none; /* Hide the cyber background */
  }
  
  /* Animations */
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .main-content {
      padding-top: 1vh;
    }
    
    .hero {
      margin: 0 0 2rem;
    }
    
    .name {
      font-size: 2.8rem;
    }
    
    .title {
      font-size: 1.1rem;
    }
    
    .about {
      font-size: 0.9rem;
      margin-bottom: 1.8rem;
      gap: 1.6rem;
      padding: 0.3rem;
    }
    
    .terminal-window {
      max-width: 100%;
    }
    
    .terminal-content {
      padding: 10px 12px;
    }
    
    .terminal-header {
      padding: 6px 10px;
    }
    
    .terminal-button {
      width: 10px;
      height: 10px;
    }
    
    .featured h2 {
      font-size: 1rem;
    }
    
    .container {
      padding: 0 1.2rem;
    }
    
    .featured {
      margin-top: 0;
      margin-bottom: 1.2rem;
    }
  }
  
  @media (max-height: 700px) {
    .main-content {
      padding-top: 0.5vh;
    }
    
    .hero {
      margin: 0 0 1.5rem;
    }
    
    .name {
      font-size: 2.3rem;
      margin-bottom: 0.3rem;
    }
    
    .about {
      margin-bottom: 1.8rem;
      font-size: 0.8rem;
      line-height: 1.3;
      gap: 1.2rem;
      padding: 0.2rem;
    }
    
    .terminal-content {
      padding: 8px 10px;
    }
    
    .terminal-header {
      padding: 5px 8px;
    }
    
    .featured h2 {
      font-size: 0.9rem;
      margin-bottom: 0.3rem;
    }
    
    .post {
      padding: 0.25rem 0;
    }
    
    .post-title {
      font-size: 0.8rem;
    }
    
    .date {
      font-size: 0.7rem;
    }
    
    .featured {
      margin-top: 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Name typewriter effect
    const nameTypewriter = document.getElementById('name-typewriter');
    
    // Sequence: 
    // 1. Type "$sfwani"
    // 2. Pause
    // 3. Delete "$sfwani"
    // 4. Type "sanaan"
    // 5. End
    
    const nameSequence = [
      { text: "$sfwani", action: "type", delay: 100 },
      { text: "", action: "pause", delay: 1000 },
      { text: "$sfwani", action: "delete", delay: 50 },
      { text: "sanaan", action: "type", delay: 100 },
      { text: "", action: "pause", delay: 3000 },
      { text: "sanaan", action: "delete", delay: 50 }
    ];
    
    let sequenceIndex = 0;
    let charIndex = 0;
    let currentText = "";
    
    function typewriterName() {
      const currentStep = nameSequence[sequenceIndex];
      
      // Handle each action type
      if (currentStep.action === "type") {
        if (charIndex < currentStep.text.length) {
          currentText += currentStep.text.charAt(charIndex);
          nameTypewriter.textContent = currentText;
          charIndex++;
          setTimeout(typewriterName, currentStep.delay);
        } else {
          // Move to next step
          sequenceIndex++;
          charIndex = 0;
          if (sequenceIndex < nameSequence.length) {
            setTimeout(typewriterName, currentStep.delay * 3);
          } else {
            // Reset to the beginning for loop
            sequenceIndex = 0;
            setTimeout(typewriterName, 3000);
          }
        }
      } else if (currentStep.action === "delete") {
        if (currentText.length > 0) {
          currentText = currentText.slice(0, -1);
          nameTypewriter.textContent = currentText;
          setTimeout(typewriterName, currentStep.delay);
        } else {
          // Move to next step
          sequenceIndex++;
          charIndex = 0;
          if (sequenceIndex < nameSequence.length) {
            setTimeout(typewriterName, currentStep.delay);
          } else {
            // Reset to the beginning for loop
            sequenceIndex = 0;
            setTimeout(typewriterName, currentStep.delay);
          }
        }
      } else if (currentStep.action === "pause") {
        // Just wait and then move to next step
        sequenceIndex++;
        if (sequenceIndex < nameSequence.length) {
          setTimeout(typewriterName, currentStep.delay);
        } else {
          // Reset to the beginning for loop
          sequenceIndex = 0;
          setTimeout(typewriterName, currentStep.delay);
        }
      }
    }
    
    // Start the name typewriter animation
    typewriterName();
  });
</script> 